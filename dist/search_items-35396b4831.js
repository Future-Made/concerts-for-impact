searchNodes=[{"doc":"Includes types and functions shared across schemas.","ref":"Tune.Spotify.Schema.html","title":"Tune.Spotify.Schema","type":"module"},{"doc":"","ref":"Tune.Spotify.Schema.html#t:id/0","title":"Tune.Spotify.Schema.id/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Schema.html#t:thumbnail_size/0","title":"Tune.Spotify.Schema.thumbnail_size/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Schema.html#t:thumbnails/0","title":"Tune.Spotify.Schema.thumbnails/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Schema.html#t:uri/0","title":"Tune.Spotify.Schema.uri/0","type":"type"},{"doc":"Represents an album.Depending on how the album is retrieved, it may or may not include artists or tracks.","ref":"Tune.Spotify.Schema.Album.html","title":"Tune.Spotify.Schema.Album","type":"module"},{"doc":"","ref":"Tune.Spotify.Schema.Album.html#from_tracks/1","title":"Tune.Spotify.Schema.Album.from_tracks/1","type":"function"},{"doc":"","ref":"Tune.Spotify.Schema.Album.html#grouped_tracks/1","title":"Tune.Spotify.Schema.Album.grouped_tracks/1","type":"function"},{"doc":"","ref":"Tune.Spotify.Schema.Album.html#has_multiple_discs?/1","title":"Tune.Spotify.Schema.Album.has_multiple_discs?/1","type":"function"},{"doc":"","ref":"Tune.Spotify.Schema.Album.html#main_artist/1","title":"Tune.Spotify.Schema.Album.main_artist/1","type":"function"},{"doc":"","ref":"Tune.Spotify.Schema.Album.html#release_year/1","title":"Tune.Spotify.Schema.Album.release_year/1","type":"function"},{"doc":"","ref":"Tune.Spotify.Schema.Album.html#total_duration_ms/1","title":"Tune.Spotify.Schema.Album.total_duration_ms/1","type":"function"},{"doc":"","ref":"Tune.Spotify.Schema.Album.html#tracks_count/1","title":"Tune.Spotify.Schema.Album.tracks_count/1","type":"function"},{"doc":"","ref":"Tune.Spotify.Schema.Album.html#t:album_type/0","title":"Tune.Spotify.Schema.Album.album_type/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Schema.Album.html#t:id/0","title":"Tune.Spotify.Schema.Album.id/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Schema.Album.html#t:t/0","title":"Tune.Spotify.Schema.Album.t/0","type":"type"},{"doc":"Represents an artist.Depending on how the artist is retrieved, it may or may not include albums.","ref":"Tune.Spotify.Schema.Artist.html","title":"Tune.Spotify.Schema.Artist","type":"module"},{"doc":"","ref":"Tune.Spotify.Schema.Artist.html#t:id/0","title":"Tune.Spotify.Schema.Artist.id/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Schema.Artist.html#t:t/0","title":"Tune.Spotify.Schema.Artist.t/0","type":"type"},{"doc":"Represents a device able to play.","ref":"Tune.Spotify.Schema.Device.html","title":"Tune.Spotify.Schema.Device","type":"module"},{"doc":"","ref":"Tune.Spotify.Schema.Device.html#t:id/0","title":"Tune.Spotify.Schema.Device.id/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Schema.Device.html#t:t/0","title":"Tune.Spotify.Schema.Device.t/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Schema.Device.html#t:volume_percent/0","title":"Tune.Spotify.Schema.Device.volume_percent/0","type":"type"},{"doc":"Represents an episode.Depending on how the episode is retrieved, it may or may not include a show and a publisher.","ref":"Tune.Spotify.Schema.Episode.html","title":"Tune.Spotify.Schema.Episode","type":"module"},{"doc":"","ref":"Tune.Spotify.Schema.Episode.html#t:t/0","title":"Tune.Spotify.Schema.Episode.t/0","type":"type"},{"doc":"Represents the status of a users playing device.","ref":"Tune.Spotify.Schema.Player.html","title":"Tune.Spotify.Schema.Player","type":"module"},{"doc":"","ref":"Tune.Spotify.Schema.Player.html#changes/2","title":"Tune.Spotify.Schema.Player.changes/2","type":"function"},{"doc":"","ref":"Tune.Spotify.Schema.Player.html#t:prop/0","title":"Tune.Spotify.Schema.Player.prop/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Schema.Player.html#t:t/0","title":"Tune.Spotify.Schema.Player.t/0","type":"type"},{"doc":"Represents a playlist.","ref":"Tune.Spotify.Schema.Playlist.html","title":"Tune.Spotify.Schema.Playlist","type":"module"},{"doc":"","ref":"Tune.Spotify.Schema.Playlist.html#albums_grouped_by_type/1","title":"Tune.Spotify.Schema.Playlist.albums_grouped_by_type/1","type":"function"},{"doc":"","ref":"Tune.Spotify.Schema.Playlist.html#total_duration_ms/1","title":"Tune.Spotify.Schema.Playlist.total_duration_ms/1","type":"function"},{"doc":"","ref":"Tune.Spotify.Schema.Playlist.html#tracks_count/1","title":"Tune.Spotify.Schema.Playlist.tracks_count/1","type":"function"},{"doc":"","ref":"Tune.Spotify.Schema.Playlist.html#t:id/0","title":"Tune.Spotify.Schema.Playlist.id/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Schema.Playlist.html#t:t/0","title":"Tune.Spotify.Schema.Playlist.t/0","type":"type"},{"doc":"Represents a show/episode publisher.","ref":"Tune.Spotify.Schema.Publisher.html","title":"Tune.Spotify.Schema.Publisher","type":"module"},{"doc":"","ref":"Tune.Spotify.Schema.Publisher.html#t:t/0","title":"Tune.Spotify.Schema.Publisher.t/0","type":"type"},{"doc":"Represents a show.","ref":"Tune.Spotify.Schema.Show.html","title":"Tune.Spotify.Schema.Show","type":"module"},{"doc":"","ref":"Tune.Spotify.Schema.Show.html#t:id/0","title":"Tune.Spotify.Schema.Show.id/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Schema.Show.html#t:t/0","title":"Tune.Spotify.Schema.Show.t/0","type":"type"},{"doc":"Represents an album track.","ref":"Tune.Spotify.Schema.Track.html","title":"Tune.Spotify.Schema.Track","type":"module"},{"doc":"","ref":"Tune.Spotify.Schema.Track.html#artist_ids/1","title":"Tune.Spotify.Schema.Track.artist_ids/1","type":"function"},{"doc":"","ref":"Tune.Spotify.Schema.Track.html#t:t/0","title":"Tune.Spotify.Schema.Track.t/0","type":"type"},{"doc":"Represents a Spotify user.","ref":"Tune.Spotify.Schema.User.html","title":"Tune.Spotify.Schema.User","type":"module"},{"doc":"","ref":"Tune.Spotify.Schema.User.html#premium?/1","title":"Tune.Spotify.Schema.User.premium?/1","type":"function"},{"doc":"","ref":"Tune.Spotify.Schema.User.html#t:t/0","title":"Tune.Spotify.Schema.User.t/0","type":"type"},{"doc":"Defines a behaviour that can be used to model an active user session against the Spotify API.Implementations should be stateful: given an initial session id and authentication credentials, the implementation should perform authentication in setup/2. If successful, a session should be opened and used for any other function keyed by the same session id.Most of the behaviour functions cover the Spotify HTTP Api and return structs defined under Tune.Spotify.Schema.Two extra functions, subscribe/1 and broadcast/2, are used to define the mechanism used to notify other processes of changes in the session state.For a working implementation, see Tune.Spotify.Session.HTTP.","ref":"Tune.Spotify.Session.html","title":"Tune.Spotify.Session","type":"behaviour"},{"doc":"","ref":"Tune.Spotify.Session.html#c:broadcast/2","title":"Tune.Spotify.Session.broadcast/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:get_album/2","title":"Tune.Spotify.Session.get_album/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:get_artist/2","title":"Tune.Spotify.Session.get_artist/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:get_artist_albums/3","title":"Tune.Spotify.Session.get_artist_albums/3","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:get_devices/1","title":"Tune.Spotify.Session.get_devices/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:get_episodes/2","title":"Tune.Spotify.Session.get_episodes/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:get_player_token/1","title":"Tune.Spotify.Session.get_player_token/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:get_playlist/2","title":"Tune.Spotify.Session.get_playlist/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:get_profile/1","title":"Tune.Spotify.Session.get_profile/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:get_recommendations_from_artists/2","title":"Tune.Spotify.Session.get_recommendations_from_artists/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:get_show/2","title":"Tune.Spotify.Session.get_show/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:next/1","title":"Tune.Spotify.Session.next/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:now_playing/1","title":"Tune.Spotify.Session.now_playing/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:play/2","title":"Tune.Spotify.Session.play/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:play/3","title":"Tune.Spotify.Session.play/3","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:prev/1","title":"Tune.Spotify.Session.prev/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:recently_played_tracks/2","title":"Tune.Spotify.Session.recently_played_tracks/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:refresh_devices/1","title":"Tune.Spotify.Session.refresh_devices/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:search/3","title":"Tune.Spotify.Session.search/3","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:seek/2","title":"Tune.Spotify.Session.seek/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:set_volume/2","title":"Tune.Spotify.Session.set_volume/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:setup/2","title":"Tune.Spotify.Session.setup/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:subscribe/1","title":"Tune.Spotify.Session.subscribe/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:toggle_play/1","title":"Tune.Spotify.Session.toggle_play/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:top_tracks/2","title":"Tune.Spotify.Session.top_tracks/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#c:transfer_playback/2","title":"Tune.Spotify.Session.transfer_playback/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Session.html#t:context_uri/0","title":"Tune.Spotify.Session.context_uri/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Session.html#t:credentials/0","title":"Tune.Spotify.Session.credentials/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Session.html#t:id/0","title":"Tune.Spotify.Session.id/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Session.html#t:item_id/0","title":"Tune.Spotify.Session.item_id/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Session.html#t:message/0","title":"Tune.Spotify.Session.message/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Session.html#t:player_token/0","title":"Tune.Spotify.Session.player_token/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Session.html#t:uri/0","title":"Tune.Spotify.Session.uri/0","type":"type"},{"doc":"This module implements a state machine mapped to a user session, wrapping interaction with the Spotify API.General structureThe state machine implements the Tune.Spotify.Session behaviour for its public API and uses GenStateMachine to model its lifecycle.If you're not familiar with the gen_statem behaviour (which powers GenStateMachine), it's beneficial to read http://erlang.org/doc/design_principles/statem.html before proceeding further.The state machine uses the handle_event_function callback mode and has 3 states: :not_authenticated, :authenticated and :expired. ┌─────────────────┐ │Not authenticated│ └─────────────────┘ │ │ ▼ ┌ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┌──────── Authenticate │─────────┐ │ └ ─ ─ ─ ─ ─ ─ ─ ─ ─ │ │ │ │ Success Token Invalid │ expired token │ │ │ │ │ │ ▼ ▼ ▼ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ │Authenticated│ │ Expired │ │ Stop │ └─────────────┘ └─────────────┘ └─────────────┘ ▲ │ ▲ │ Get new │ Success token │ │ ┌ ─ ─ ─ ─ │ │ └──── Refresh │◀───┘ │ └ ─ ─ ─ ─ │ │ │ │ Invalid │ └──────────refresh ─────────┘ tokenWhen the process starts, it tries to authenticate against the Spotify API using the provided credentials. If successful, it enters the authenticated state, where all API functions can be executed correctly.If authentication fails because the authentication token has expired, the process tries to get a new token using the refresh token supplied by the Spotify API. This process effectively extends the duration of the session.Any error that indicates that credentials are invalid causes the process to stop. Any transient network error automatically triggers a delayed retry, which guarantees that eventually the state machine reaches the authenticated state.Data lifecycleAside from acting as an API client for on-demand operations (e.g. search, play/pause, etc.), the state machine also regularly polls the Spotify API for current player status and connected devices. Both pieces of information are kept in the state machine data for fast read and corresponding events are broadcasted when they change.Automatic data fetch is performed after successful authentication (via an internal event) and then scheduled via a state_timeout event. Once handled, the scheduled event requeues itself via the same state_timeout events.Usage of state_timeout events complies with the general state machine: if at any point the machine enters the expired state, any queued state_timeout event is automatically expired.Automatic fetching will resume once the machine enters the authenticated state.SubscriptionsMultiple processes are able to subscribe to the events keyed by the session id.Broadcast and subscribe are implemented via Phoenix.PubSub, however the state machine maintains its own set of monitored processes subscribed to the session id.Subscription tracking is necessary to implementing automatic termination of a state machine after a period of inactivity. Without that, the state machine would indefinitely poll the Spotify API, even when no client is interested into the topic, until a crash error or a node reboot.Every 30 seconds, the state machine fires a named timeout event, checking if there's any subscribed process. If not, it terminates. Subscribed processes are monitored, so when they terminate, their exit is handled by the state machine, which removes them from its data.Usage of named timeout events is necessary, as they're guaranteed to fire irrespectively of state changes.","ref":"Tune.Spotify.Session.HTTP.html","title":"Tune.Spotify.Session.HTTP","type":"module"},{"doc":"Returns a specification to start this module under a supervisor.See Supervisor.","ref":"Tune.Spotify.Session.HTTP.html#child_spec/1","title":"Tune.Spotify.Session.HTTP.child_spec/1","type":"function"},{"doc":"","ref":"Tune.Spotify.Session.HTTP.html#start_link/1","title":"Tune.Spotify.Session.HTTP.start_link/1","type":"function"},{"doc":"","ref":"Tune.Spotify.Session.HTTP.html#start_link/3","title":"Tune.Spotify.Session.HTTP.start_link/3","type":"function"},{"doc":"","ref":"Tune.Spotify.Session.HTTP.html#t:start_opts/0","title":"Tune.Spotify.Session.HTTP.start_opts/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Session.HTTP.html#t:timeouts/0","title":"Tune.Spotify.Session.HTTP.timeouts/0","type":"type"},{"doc":"Defines a small shim to use Finch as a Sentry.HTTPClient.","ref":"Sentry.FinchClient.html","title":"Sentry.FinchClient","type":"module"},{"doc":"Defines a behaviour that can be used to model a Spotify API client.For a working implementation, see Tune.Spotify.Client.HTTP.","ref":"Tune.Spotify.Client.html","title":"Tune.Spotify.Client","type":"behaviour"},{"doc":"","ref":"Tune.Spotify.Client.html#c:get_album/2","title":"Tune.Spotify.Client.get_album/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:get_artist/2","title":"Tune.Spotify.Client.get_artist/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:get_artist_albums/3","title":"Tune.Spotify.Client.get_artist_albums/3","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:get_devices/1","title":"Tune.Spotify.Client.get_devices/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:get_episodes/2","title":"Tune.Spotify.Client.get_episodes/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:get_playlist/2","title":"Tune.Spotify.Client.get_playlist/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:get_profile/1","title":"Tune.Spotify.Client.get_profile/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:get_recommendations_from_artists/2","title":"Tune.Spotify.Client.get_recommendations_from_artists/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:get_show/2","title":"Tune.Spotify.Client.get_show/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:get_token/1","title":"Tune.Spotify.Client.get_token/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:next/1","title":"Tune.Spotify.Client.next/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:now_playing/1","title":"Tune.Spotify.Client.now_playing/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:pause/1","title":"Tune.Spotify.Client.pause/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:play/1","title":"Tune.Spotify.Client.play/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:play/2","title":"Tune.Spotify.Client.play/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:play/3","title":"Tune.Spotify.Client.play/3","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:prev/1","title":"Tune.Spotify.Client.prev/1","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:recently_played_tracks/2","title":"Tune.Spotify.Client.recently_played_tracks/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:search/3","title":"Tune.Spotify.Client.search/3","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:seek/2","title":"Tune.Spotify.Client.seek/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:set_volume/2","title":"Tune.Spotify.Client.set_volume/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:top_tracks/2","title":"Tune.Spotify.Client.top_tracks/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#c:transfer_playback/2","title":"Tune.Spotify.Client.transfer_playback/2","type":"callback"},{"doc":"","ref":"Tune.Spotify.Client.html#t:album_group/0","title":"Tune.Spotify.Client.album_group/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Client.html#t:get_artist_albums_options/0","title":"Tune.Spotify.Client.get_artist_albums_options/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Client.html#t:item_type/0","title":"Tune.Spotify.Client.item_type/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Client.html#t:pagination_option/0","title":"Tune.Spotify.Client.pagination_option/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Client.html#t:pagination_options/0","title":"Tune.Spotify.Client.pagination_options/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Client.html#t:q/0","title":"Tune.Spotify.Client.q/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Client.html#t:recently_played_tracks_options/0","title":"Tune.Spotify.Client.recently_played_tracks_options/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Client.html#t:search_options/0","title":"Tune.Spotify.Client.search_options/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Client.html#t:search_results/0","title":"Tune.Spotify.Client.search_results/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Client.html#t:token/0","title":"Tune.Spotify.Client.token/0","type":"type"},{"doc":"","ref":"Tune.Spotify.Client.html#t:top_tracks_options/0","title":"Tune.Spotify.Client.top_tracks_options/0","type":"type"},{"doc":"This module implements the Tune.Spotify.Client behaviour and interacts with the actual Spotify API.Reference docs are available at: https://developer.spotify.com/documentation/web-api/","ref":"Tune.Spotify.Client.HTTP.html","title":"Tune.Spotify.Client.HTTP","type":"module"},{"doc":"Includes functions used to perform authentication.","ref":"Tune.Auth.html","title":"Tune.Auth","type":"module"},{"doc":"","ref":"Tune.Auth.html#load_user/1","title":"Tune.Auth.load_user/1","type":"function"},{"doc":"","ref":"Tune.Auth.html#t:http_session/0","title":"Tune.Auth.http_session/0","type":"type"},{"doc":"Controls authentication via the Spotify API.","ref":"TuneWeb.AuthController.html","title":"TuneWeb.AuthController","type":"module"},{"doc":"","ref":"TuneWeb.AuthController.html#callback/2","title":"TuneWeb.AuthController.callback/2","type":"function"},{"doc":"","ref":"TuneWeb.AuthController.html#delete/2","title":"TuneWeb.AuthController.delete/2","type":"function"},{"doc":"","ref":"TuneWeb.AuthController.html#ensure_authenticated/2","title":"TuneWeb.AuthController.ensure_authenticated/2","type":"function"},{"doc":"","ref":"TuneWeb.AuthController.html#new/2","title":"TuneWeb.AuthController.new/2","type":"function"},{"doc":"","ref":"TuneWeb.AuthView.html","title":"TuneWeb.AuthView","type":"module"},{"doc":"The resource name, as an atom, for this view","ref":"TuneWeb.AuthView.html#__resource__/0","title":"TuneWeb.AuthView.__resource__/0","type":"function"},{"doc":"Renders the given template locally.","ref":"TuneWeb.AuthView.html#render/2","title":"TuneWeb.AuthView.render/2","type":"function"},{"doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template.","ref":"TuneWeb.AuthView.html#template_not_found/2","title":"TuneWeb.AuthView.template_not_found/2","type":"function"},{"doc":"Main view used in the application. Covers:SearchSuggestionsDisplaying details for artists, albums, etc.Mini playerMounting and authenticationWhen mounting, TuneWeb.ExplorerLive uses the session data to start a Spotify session. Note that we use a private function spotify_session/0 to load the appropriate behaviour (for example in tests we use a mock).mount/3 always loads user profile data, player status and currently available devices, as such information is always displayed irrespectively of the section.When connected, mount/3 also subscribes to session event for the relevant session id.RoutingDepending on the route, handle_params/3 dispatches to different internal functions which take care of loading additional data specific for each section.EventsEvents generated by subscriptions are handled in handle_info/2 and primarily take care of updating the socket assigns. When appropriate, changes are forwarded to the progress bar so that it gets updated. This mechanism ensures that:when the same song plays and only elapsed time changes, only the progress bar is re-renderedwhen the song changes or is played/paused, we also re-render other parts of the UI (e.g. if the currently playing song is visualized in its album's tracklist)Events generated by the UI are all handled via handle_event/3.","ref":"TuneWeb.ExplorerLive.html","title":"TuneWeb.ExplorerLive","type":"module"},{"doc":"Callback implementation for Phoenix.LiveView.render/1.","ref":"TuneWeb.ExplorerLive.html#render/1","title":"TuneWeb.ExplorerLive.render/1","type":"function"},{"doc":"Module with named helpers generated from TuneWeb.Router.","ref":"TuneWeb.Router.Helpers.html","title":"TuneWeb.Router.Helpers","type":"module"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#auth_path/2","title":"TuneWeb.Router.Helpers.auth_path/2","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#auth_path/3","title":"TuneWeb.Router.Helpers.auth_path/3","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#auth_path/4","title":"TuneWeb.Router.Helpers.auth_path/4","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#auth_url/2","title":"TuneWeb.Router.Helpers.auth_url/2","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#auth_url/3","title":"TuneWeb.Router.Helpers.auth_url/3","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#auth_url/4","title":"TuneWeb.Router.Helpers.auth_url/4","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#explorer_path/2","title":"TuneWeb.Router.Helpers.explorer_path/2","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#explorer_path/3","title":"TuneWeb.Router.Helpers.explorer_path/3","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#explorer_path/4","title":"TuneWeb.Router.Helpers.explorer_path/4","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#explorer_url/2","title":"TuneWeb.Router.Helpers.explorer_url/2","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#explorer_url/3","title":"TuneWeb.Router.Helpers.explorer_url/3","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#explorer_url/4","title":"TuneWeb.Router.Helpers.explorer_url/4","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#live_dashboard_path/2","title":"TuneWeb.Router.Helpers.live_dashboard_path/2","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#live_dashboard_path/3","title":"TuneWeb.Router.Helpers.live_dashboard_path/3","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#live_dashboard_path/4","title":"TuneWeb.Router.Helpers.live_dashboard_path/4","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#live_dashboard_path/5","title":"TuneWeb.Router.Helpers.live_dashboard_path/5","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#live_dashboard_url/2","title":"TuneWeb.Router.Helpers.live_dashboard_url/2","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#live_dashboard_url/3","title":"TuneWeb.Router.Helpers.live_dashboard_url/3","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#live_dashboard_url/4","title":"TuneWeb.Router.Helpers.live_dashboard_url/4","type":"function"},{"doc":"","ref":"TuneWeb.Router.Helpers.html#live_dashboard_url/5","title":"TuneWeb.Router.Helpers.live_dashboard_url/5","type":"function"},{"doc":"Generates the path information including any necessary prefix.","ref":"TuneWeb.Router.Helpers.html#path/2","title":"TuneWeb.Router.Helpers.path/2","type":"function"},{"doc":"Generates an integrity hash to a static asset given its file path.","ref":"TuneWeb.Router.Helpers.html#static_integrity/2","title":"TuneWeb.Router.Helpers.static_integrity/2","type":"function"},{"doc":"Generates path to a static asset given its file path.","ref":"TuneWeb.Router.Helpers.html#static_path/2","title":"TuneWeb.Router.Helpers.static_path/2","type":"function"},{"doc":"Generates url to a static asset given its file path.","ref":"TuneWeb.Router.Helpers.html#static_url/2","title":"TuneWeb.Router.Helpers.static_url/2","type":"function"},{"doc":"Generates the connection/endpoint base URL without any path information.","ref":"TuneWeb.Router.Helpers.html#url/1","title":"TuneWeb.Router.Helpers.url/1","type":"function"},{"doc":"This module is responsible for all runtime config resolution.","ref":"Tune.Config.html","title":"Tune.Config","type":"module"},{"doc":"Provides functions to convert millisecond durations to different formats.","ref":"Tune.Duration.html","title":"Tune.Duration","type":"module"},{"doc":"Given a duration in milliseconds, returns a string with the duration formatted as hours, minutes and seconds, omitting units where appropriate.iex&gt; milliseconds = :timer.seconds(5) iex&gt; Tune.Duration.hms(milliseconds) &quot;0:05&quot; iex&gt; milliseconds = :timer.seconds(61) iex&gt; Tune.Duration.hms(milliseconds) &quot;1:01&quot; iex&gt; milliseconds = :timer.hours(2) iex&gt; Tune.Duration.hms(milliseconds) &quot;2:00:00&quot;","ref":"Tune.Duration.html#hms/1","title":"Tune.Duration.hms/1","type":"function"},{"doc":"Given a duration in milliseconds, returns a localized, human-readable representation of that duration.iex&gt; Tune.Duration.human(100) &quot;Less than a minute&quot;Durations are rounded to the minute:iex&gt; milliseconds = :timer.seconds(61) iex&gt; Tune.Duration.human(milliseconds) &quot;1 minute&quot; iex&gt; milliseconds = :timer.seconds(95) iex&gt; Tune.Duration.human(milliseconds) &quot;2 minutes&quot;","ref":"Tune.Duration.html#human/1","title":"Tune.Duration.human/1","type":"function"},{"doc":"","ref":"Tune.Duration.html#t:milliseconds/0","title":"Tune.Duration.milliseconds/0","type":"type"},{"doc":"A module providing Internationalization with a gettext-based API.By using Gettext, your module gains a set of macros for translations, for example:import Tune.Gettext # Simple translation gettext(&quot;Here is the string to translate&quot;) # Plural translation ngettext(&quot;Here is the string to translate&quot;, &quot;Here are the strings to translate&quot;, 3) # Domain-based translation dgettext(&quot;errors&quot;, &quot;Here is the error message to translate&quot;)See the Gettext Docs for detailed usage.","ref":"Tune.Gettext.html","title":"Tune.Gettext","type":"module"},{"doc":"Callback implementation for Gettext.Backend.dgettext/3.","ref":"Tune.Gettext.html#dgettext/3","title":"Tune.Gettext.dgettext/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dgettext_noop/2.","ref":"Tune.Gettext.html#dgettext_noop/2","title":"Tune.Gettext.dgettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dngettext/5.","ref":"Tune.Gettext.html#dngettext/5","title":"Tune.Gettext.dngettext/5","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dngettext_noop/3.","ref":"Tune.Gettext.html#dngettext_noop/3","title":"Tune.Gettext.dngettext_noop/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dpgettext/4.","ref":"Tune.Gettext.html#dpgettext/4","title":"Tune.Gettext.dpgettext/4","type":"macro"},{"doc":"","ref":"Tune.Gettext.html#dpgettext_noop/3","title":"Tune.Gettext.dpgettext_noop/3","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.dpngettext/6.","ref":"Tune.Gettext.html#dpngettext/6","title":"Tune.Gettext.dpngettext/6","type":"macro"},{"doc":"","ref":"Tune.Gettext.html#dpngettext_noop/4","title":"Tune.Gettext.dpngettext_noop/4","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext/2.","ref":"Tune.Gettext.html#gettext/2","title":"Tune.Gettext.gettext/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext_comment/1.","ref":"Tune.Gettext.html#gettext_comment/1","title":"Tune.Gettext.gettext_comment/1","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.gettext_noop/1.","ref":"Tune.Gettext.html#gettext_noop/1","title":"Tune.Gettext.gettext_noop/1","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_bindings/2.","ref":"Tune.Gettext.html#handle_missing_bindings/2","title":"Tune.Gettext.handle_missing_bindings/2","type":"function"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_plural_translation/6.","ref":"Tune.Gettext.html#handle_missing_plural_translation/6","title":"Tune.Gettext.handle_missing_plural_translation/6","type":"function"},{"doc":"Callback implementation for Gettext.Backend.handle_missing_translation/4.","ref":"Tune.Gettext.html#handle_missing_translation/4","title":"Tune.Gettext.handle_missing_translation/4","type":"function"},{"doc":"","ref":"Tune.Gettext.html#lgettext/5","title":"Tune.Gettext.lgettext/5","type":"function"},{"doc":"","ref":"Tune.Gettext.html#lngettext/7","title":"Tune.Gettext.lngettext/7","type":"function"},{"doc":"Callback implementation for Gettext.Backend.ngettext/4.","ref":"Tune.Gettext.html#ngettext/4","title":"Tune.Gettext.ngettext/4","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.ngettext_noop/2.","ref":"Tune.Gettext.html#ngettext_noop/2","title":"Tune.Gettext.ngettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.pgettext/3.","ref":"Tune.Gettext.html#pgettext/3","title":"Tune.Gettext.pgettext/3","type":"macro"},{"doc":"","ref":"Tune.Gettext.html#pgettext_noop/2","title":"Tune.Gettext.pgettext_noop/2","type":"macro"},{"doc":"Callback implementation for Gettext.Backend.pngettext/5.","ref":"Tune.Gettext.html#pngettext/5","title":"Tune.Gettext.pngettext/5","type":"macro"},{"doc":"","ref":"Tune.Gettext.html#pngettext_noop/3","title":"Tune.Gettext.pngettext_noop/3","type":"macro"},{"doc":"Provides functions to generate integration links from tracks, artists and albums.Implementations are extremely naive and rely on building URLs from metadata, but there are times when they simply don't work, particularly with titles that have suffixes like &quot;2017 remaster&quot; or &quot;feat. another artist name&quot;.","ref":"Tune.Link.html","title":"Tune.Link","type":"module"},{"doc":"","ref":"Tune.Link.html#last_fm/1","title":"Tune.Link.last_fm/1","type":"function"},{"doc":"","ref":"Tune.Link.html#last_fm/3","title":"Tune.Link.last_fm/3","type":"function"},{"doc":"","ref":"Tune.Link.html#musixmatch/2","title":"Tune.Link.musixmatch/2","type":"function"},{"doc":"","ref":"Tune.Link.html#wikipedia/1","title":"Tune.Link.wikipedia/1","type":"function"},{"doc":"","ref":"Tune.Link.html#youtube/1","title":"Tune.Link.youtube/1","type":"function"},{"doc":"","ref":"Tune.Link.html#youtube/2","title":"Tune.Link.youtube/2","type":"function"},{"doc":"TuneTuneAboutAlbum detailsGlobal SearchArtist detailsTop albums and recommendationsRelease radarUsageScope and featuresKeyboard shortcutsFree vs. Premium SubscriptionsData retention and privacyIssues with devices and playbackDevelopmentSetupRunning the applicationTests, dialyzer and credoDocumentationApplication structureTelemetryDeploymentCreditsCode of ConductLicense","ref":"readme.html","title":"Tune","type":"extras"},{"doc":"Tune is a Spotify browser and remote application with a focus on performance and integration with other services.You can see it in action at https://tune.fullyforged.com.Album detailsGlobal SearchArtist detailsTop albums and recommendationsRelease radar","ref":"readme.html#about","title":"Tune - About","type":"extras"},{"doc":"Scope and featuresIn many ways Tune copies the official Spotify application: many views (e.g. search or details for artists and albums) are tightly based on the equivalent sections in the Spotify application. This is an intentional choice aimed at reducing friction between applications.Tune differs in these areas:Performance: Tune is extremely light, as for the most part is a server-rendered application, which makes it suitable to use on a wide range of devices and operating systems (think Linux on a Raspberry PI). Most of its functionality works without JavaScript and is exposed via a proper URL.Integration: Tune tries to connect items like artists, albums or songs to other sources of information, so that for example you can use convenient links to read the history of a band on Wikipedia.Recommendations: Tune offers suggestions based on a combination of what's provided by Spotify and some custom logic (loosely based on what you've been listening in a specific time period). The logic is an almost direct porting of how I search for new music, so it might not work for you.Keyboard shortcuts&lt;kbd&gt;Space&lt;/kbd&gt;: Play/Pause&lt;kbd&gt;h&lt;/kbd&gt;: Home&lt;kbd&gt;a&lt;/kbd&gt;: Prev&lt;kbd&gt;d&lt;/kbd&gt;: Next&lt;kbd&gt;w&lt;/kbd&gt;: Volume up&lt;kbd&gt;s&lt;/kbd&gt;: Volume down&lt;kbd&gt;/&lt;/kbd&gt;: Focus search input&lt;kbd&gt;q&lt;/kbd&gt;: Focus device selector&lt;kbd&gt;?&lt;/kbd&gt;: Display a modal dialog with available shortcutsFree vs. Premium SubscriptionsFeatureFree subscriptionPremium SubscriptionSearch✅✅Artist/Album/etc. details✅✅Suggestions✅✅Release radar✅✅Miniplayer controls❌✅Device chooser❌✅Embedded audio player❌✅ (on some browsers)Due to limitations imposed by Spotify, users with free subscriptions cannot use the embedded audio player, nor they can control other devices via Tune's UI. If you have a free subscription, those UI elements are not visible as they're ineffective.For users with Premium subscriptions, Tune can be used as a standalone player by selecting the appropriate option in the device switch section in the mini player (note that only some browsers are supported).Data retention and privacyTune doesn't have any persistent storage: upon successful authentication, credentials are only stored in your browser's cookies and kept in memory in the application.Credentials are cleared at most 30 seconds after you close the last browser session, even if you don't explicitly logout.At this point in time, credentials may be printed in logs and/or crash reports.Issues with devices and playbackIf you use Tune in combination with official Spotify clients, you will notice that if nothing is playing, after a while the miniplayer controls stop responding and you can't even play any song. This is due to a quirk in the Spotify devices API, which reports client devices as still connected.If you're running Tune on a platform where it can load the built-in audio player, you can just refresh the page for the player to reload, which has the side effect of &quot;waking up&quot; all other clients as well. At that point, you can select them from the device switcher and resume normal operation.If you're running Tune on a mobile device, your only option is to open the dormant client application, do a quick play/pause to wake it up and go back to Tune.More information on the related Spotify documentation page.","ref":"readme.html#usage","title":"Tune - Usage","type":"extras"},{"doc":"SetupFirst of all, we need working installations of Elixir and Erlang. The recommended way to achieve this is via asdf. Once it's installed and working, you can run asdf install from the project root to install the correct versions required (see the .tool-versions file for details).Next, make sure you setup the required environment variables as detailed in .env by copying the file to .env.local and adjusting values as needed.Please see the Vapor docs for more detail on the dotenv configuration provider.To create secrets, (e.g. for SECRET_KEY_BASE), use mix phx.gen.secret.Next you can install all dependencies with mix setup.Running the applicationStart the application with mix phx.serverTo start the application and an IEx console connected to it, use iex -S mix phx.serverNow you can visit localhost:4000 from your browser.Tests, dialyzer and CredoYou can run tests with mix test, dialyzer with mix dialyzer and Credo with mix credo.DocumentationAvailable at https://tune-docs.fullyforged.com, gets automatically updated with every push on the main branch.Application structureThe Tune namespace defines the domain logic responsible to interact with the Spotify API and maintain running sessions for each logged-in user.The TuneWeb namespace defines authentication endpoints and the main LiveView (TuneWeb.ExplorerLive) that powers the entire user interface.Tune assumes multiple browser sessions for the same user, which is why it defines a Tune.Spotify.Session behaviour with Tune.Spotify.Session.HTTP as its main runtime implementation.Each worker is responsible to proxy interaction with the Spotify API, periodically poll for data changes, and broadcast corresponding events.When a user opens a browser session, TuneWeb.ExplorerLive either starts or simply reuses a worker named with the same session ID.Each worker monitors its subscribers, so that it can shutdown when a user closes their last browser window.This architecture ensures that:The amount of automatic API calls against the Spotify API for a given user is constant and independent from the number of user sessions for the same user.Credential renewal happens in the backgroundThe explorer implementation remains entirely focused on UI interaction TelemetryThe application exposes TuneWeb.Telemetry module with definitions for relevant metrics.An instance of Phoenix.LiveDashboard is mounted at /dashboard. In production, the endpoint is protected by basic auth (see .env for relevant environment variables).","ref":"readme.html#development","title":"Tune - Development","type":"extras"},{"doc":"The project is setup to deploy on Heroku, please make sure you:configure environment variablesadd the buildpacks detailed at https://hexdocs.pm/phoenix/heroku.htmlto enable exception tracking via Sentry, make sure you define a SENTRY_DSN environment variable","ref":"readme.html#deployment","title":"Tune - Deployment","type":"extras"},{"doc":"Wikipedia icon by Freepik from www.flaticon.comLast.fm icon by Pixel perfect from www.flaticon.comYouTube icon by Freepik from www.flaticon.comAll remaining icons from Remix Icon","ref":"readme.html#credits","title":"Tune - Credits","type":"extras"},{"doc":"Available at https://github.com/fully-forged/tune/blob/main/CODE_OF_CONDUCT.md.","ref":"readme.html#code-of-conduct","title":"Tune - Code of Conduct","type":"extras"},{"doc":"Available at https://github.com/fully-forged/tune/blob/main/LICENSE.","ref":"readme.html#license","title":"Tune - License","type":"extras"}]